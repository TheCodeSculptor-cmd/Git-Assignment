Tasks1---------- to Be Performed: 


1 Based on what you have learnt in the class, do the following steps: 

 a. Create a new folder 
 b. Put the following files in the folder
      Code.txt 
      Log.txt 
     Output.txt 
c. Stage the Code.txt and Output.txt files 

d. Commit them 

e. And finally push them to GitHub 






# Step 1: Create a new folder and move into it
mkdir new_folder
cd new_folder

# Step 2: Create the files
touch Code.txt Log.txt Output.txt

# Step 3: Stage the files you want to commit
git add Code.txt Output.txt

# Step 4: Commit the changes
git commit -m "Added Code.txt and Output.txt"

# Step 5: Push to GitHub
git push origin master  # or the appropriate branch name





Tasks2--------- to be performed:
a. Create a new folder 

b. Put the following files in the folder

Code.txt 
Log.txt 
Output.txt 

c. Stage the Code.txt and Output.txt files 
d. Commit them 
e. And finally push them to GitHub  



1.Create a new folder: mkdir my_folder

2.Put the files in the folder: touch my_folder/Code.txt my_folder/Log.txt my_folder/Output.txt

3.Stage the files: cd my_task1
git init
git add Code.txt Output.txt

4.Commit the files: git commit -m "Add Code and Output files"

5.Push to GitHub: git remote add origin <your-repo-url>
git push -u origin main








Tasks3------------- to Be Performed: 


1. Create a Git working directory with feature1.txt and feature2.txt in the master branch 

2. Create 3 branches develop, feature1 and feature2 

3. In develop branch create develop.txt, do not stage or commit it 

4. Stash this file and check out to feature1 branch 

5. Create new.txt file in feature1 branch, stage and commit this file 

6. Checkout to develop, unstash this file and commit 

7. Please submit all the Git commands used to do the above step>

mkdir git-task
cd git-task
git init
touch feature1.txt
touch feature2.txt
git add .
git commit -m "Add feature1.txt and feature2.txt"
git branch develop
git branch feature1
git branch feature2
git checkout develop
touch develop.txt
git stash
git checkout feature1
touch new.txt
git add new.txt
git commit -m "Add new.txt in feature1 branch"
git checkout develop
git stash pop
git add develop.txt
git commit -m "Add develop.txt from stash"









Tasks4---------- to Be Performed: 

1. Put master.txt on master branch, stage and commit 

2. Create 3 branches: public 1, public 2 and private 

3. Put public1.txt on public 1 branch, stage and commit 

4. Merge public 1 on master branch 

5. Merge public 2 on master branch 

6. Edit master.txt on private branch, stage and commit 

7. Now update branch public 1 and public 2 with new master code in private 

8. Also update new master code on master 

9. Finally update all the code on the private branch




# Step 1: Create a new Git directory and branches
mkdir git-task
cd git-task
git init
git checkout -b develop
git checkout -b f1
git checkout -b f2
git checkout master

# Step 2: Commit main.txt in master branch
echo "Main content" > main.txt
git add main.txt
git commit -m "Add main.txt"

# Step 3: Add develop.txt in develop, f1.txt in f1, and f2.txt in f2 branches
git checkout develop
echo "Develop content" > develop.txt
git add develop.txt
git commit -m "Add develop.txt"

git checkout f1
echo "F1 content" > f1.txt
git add f1.txt
git commit -m "Add f1.txt"

git checkout f2
echo "F2 content" > f2.txt
git add f2.txt
git commit -m "Add f2.txt"

# Step 4: Push all branches to GitHub
git remote add origin <your-github-repo-url>
git push origin master
git push origin develop
git push origin f1
git push origin f2

# Step 5: Delete f2 branch locally
git checkout develop
git branch -d f2

# Step 6: Delete f2 branch on GitHub
git push origin --delete f2























 Tasks5----------------- to Be Performed: 

1. Put master.txt on master branch, stage and commit 

2. Create 3 branches: public 1, public 2 and private 

3. Put public1.txt on public 1 branch, stage and commit 

4. Merge public 1 on master branch 

5. Merge public 2 on master branch 

6. Edit master.txt on private branch, stage and commit 

7. Now update branch public 1 and public 2 with new master code in private 

8. Also update new master code on master 

9. Finally update all the code on the private branch




# Step 1: Add master.txt to master branch
echo "Master content" > master.txt
git add master.txt
git commit -m "Add master.txt"

# Step 2: Create branches public1, public2, and private
git checkout -b public1
git checkout -b public2
git checkout -b private
git checkout master

# Step 3: Add public1.txt on public1 branch
git checkout public1
echo "Public 1 content" > public1.txt
git add public1.txt
git commit -m "Add public1.txt"

# Step 4: Merge public1 into master branch
git checkout master
git merge public1

# Step 5: Add public2.txt on public2 branch and merge into master
git checkout public2
echo "Public 2 content" > public2.txt
git add public2.txt
git commit -m "Add public2.txt"
git checkout master
git merge public2

# Step 6: Edit master.txt on private branch
git checkout private
echo "Updated master content" > master.txt
git add master.txt
git commit -m "Edit master.txt on private"

# Step 7: Update public1 and public2 with new master code
git checkout public1
git merge master
git checkout public2
git merge master

# Step 9: Update all code on private branch
git checkout private
git merge master













Tasks6------------------- to Be Performed: 

1. Create a Git Flow workflow architecture on Git 

2. Create all the required branches 

3. starting from e feature branch, push the branch to the master, following the architecture 

4. Push an urgent.txt on master using





# Step 1: Set up working directory and initialize
mkdir git_flow_project
cd git_flow_project
git init

# Step 2: Create branches
git checkout -b develop
git checkout -b master
git checkout -b feature/new-feature

# Step 3: Push the feature branch to master
echo "New feature content" > feature.txt
git add feature.txt
git commit -m "Add new feature"

# Merge feature into develop
git checkout develop
git merge feature/new-feature

# Merge develop into master
git checkout master
git merge develop

# Step 4: Push urgent.txt on master using hotfix
git checkout -b hotfix/urgent-fix
echo "Urgent fix content" > urgent.txt
git add urgent.txt
git commit -m "Add urgent fix"

# Merge hotfix into master
git checkout master
git merge hotfix/urgent-fix





